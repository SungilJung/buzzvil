buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["Buzzvil_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"


def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Buzzvil_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Buzzvil_" + name]).toInteger()
}

apply from: file("./app-json.gradle")

def appJSONBuzzvilAdsAppIDString

if (rootProject.ext.buzzvilAdsJson) {
  appJSONBuzzvilAdsAppIDString = rootProject.ext.buzzvilAdsJson.getStringValue("android_app_id", "")
}

if (!appJSONBuzzvilAdsAppIDString) {
  println "\n\n\n"
  println "**************************************************************************************************************"
  println "\n\n\n"
  println "ERROR: react-native-buzzvil-ads requires an 'android_app_id' property inside a 'react-native-buzzvil-ads' key in your app.json."
  println "  No android_app_id property was found in this location. The native buzzvil Ads SDK will crash on startup without it."
  println "\n\n\n"
  println "**************************************************************************************************************"
  println "\n\n\n"
  System.exit(1)
} else {
  println "\n"
  println "**************************************************************************************************************"
  println appJSONBuzzvilAdsAppIDString
  println "**************************************************************************************************************"
  println "\n"
}

android {
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    multiDexEnabled true
    manifestPlaceholders = [
      appJSONBuzzvilAdsAppID:appJSONBuzzvilAdsAppIDString,
    ]
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

}
rootProject.allprojects {
  repositories {
    jcenter()
    mavenCentral()
    google()
    maven { url "https://dl.buzzvil.com/public/maven" }
  }
}


def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation ("com.buzzvil:buzzad-benefit:3.33.+")
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "BuzzvilView"
    codegenJavaPackageName = "com.buzzvil"
  }
}
